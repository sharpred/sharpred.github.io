I",<p><strong>Introduction</strong></p>

<p>There are lots of different options for running a CI/CD Server, you can use what I would describe as third party ‚Äúgeneralist‚Äù services like <a href="https://circleci.com/">Circle CI</a> or <a href="https://travis-ci.org/">Travis CI</a>, or you can use services that specialise in a specific type of build.  In my line of work (mobile app development) the specialist services would include the likes of <a href="https://www.buddybuild.com/">BuddyBuild</a> or <a href="https://codemagic.io/start/">CodeMagic</a> for building iOS and Flutter applications respectively.</p>

<p>I am going to start this section of my blog by talking about the CICD server that I have the most experience of, namely, GoCD Server from ThoughtWorks Inc. (https://www.gocd.org/)</p>

<p><strong>Setting Things Up</strong></p>

<p>The easiest way to get started with GoCD is to use a Docker image.  If you do not have Docker installed I will do a post on Docker at a later date but, for now, head on over to <a href="https://www.docker.com/">Docker</a> and get yourself set up if you need to.</p>

<p>We will start with a simple installation and then modify our Dockerfile as we progress through the steps.  A simple Dockerfile can look merely like this;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM gocd/gocd-server:latest
</code></pre></div></div>

<p>Running <code class="language-plaintext highlighter-rouge">docker build .</code> from a command line or terminal should result in something like the following appearing;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚ùØ docker build .

Sending build context to Docker daemon  2.048kB
Step 1/1 : FROM gocd/gocd-server:v20.4.0
v20.4.0: Pulling from gocd/gocd-server
cbdbe7a5bc2a: Pull complete 
6de64cb887e5: Pull complete 
c2fe25cff160: Pull complete 
d89af7f87fa5: Pull complete 
0b33aed149c0: Pull complete 
4ba2a8528dac: Pull complete 
b46c5eeb051d: Pull complete 
1358f24c95c2: Pull complete 
d75c11233860: Pull complete 
Digest: sha256:a50d5ecd48686a4b7c4d86c645ca16f4e5f3e540016939ea63aa520819a06f95
Status: Downloaded newer image for gocd/gocd-server:v20.4.0
 ---&gt; 557ebecbe42e
Successfully built 557ebecbe42e
</code></pre></div></div>

<p>It can be useful to tag your Docker images to make it easier to use them afterwards.  Repeating the last command with the switch <code class="language-plaintext highlighter-rouge">-t mygocdimage</code> will return something like this;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚ùØ docker build . -t mygocdimage

Sending build context to Docker daemon  2.048kB
Step 1/1 : FROM gocd/gocd-server:v20.4.0
 ---&gt; 557ebecbe42e
Successfully built 557ebecbe42e
Successfully tagged mygocdimage:latest
</code></pre></div></div>

<p>You can now run your GoCD Server by typing <code class="language-plaintext highlighter-rouge">docker run -d -p8153:8153 mygocdimage</code> wait a couple of minutes and then type <code class="language-plaintext highlighter-rouge">docker ps -a</code> to check that your container is running.  You should see something like</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚ùØ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                       PORTS                    NAMES
dee2b58cb124        mygocdimage         "/docker-entrypoint.‚Ä¶"   2 minutes ago       Up 2 minutes                 0.0.0.0:8153-&gt;8153/tcp   adoring_colden
</code></pre></div></div>

<p>Upon visiting the landing page http://localhost:8153 in your browser you should see something like <img src="/images/gocdserver001.png" alt="this screenshot" /></p>

:ET